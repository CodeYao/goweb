// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ca.proto

/*
Package ca_grpc is a generated protocol buffer package.

It is generated from these files:
	ca.proto

It has these top-level messages:
	IsPermissionReply
	AddressRequest
	AddressList
	Cert
	Empty
*/
package ca_grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IsPermissionReply struct {
	IsPermission bool `protobuf:"varint,1,opt,name=IsPermission" json:"IsPermission,omitempty"`
}

func (m *IsPermissionReply) Reset()                    { *m = IsPermissionReply{} }
func (m *IsPermissionReply) String() string            { return proto.CompactTextString(m) }
func (*IsPermissionReply) ProtoMessage()               {}
func (*IsPermissionReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IsPermissionReply) GetIsPermission() bool {
	if m != nil {
		return m.IsPermission
	}
	return false
}

// The request message containing the user's name.
type AddressRequest struct {
	Addr string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
}

func (m *AddressRequest) Reset()                    { *m = AddressRequest{} }
func (m *AddressRequest) String() string            { return proto.CompactTextString(m) }
func (*AddressRequest) ProtoMessage()               {}
func (*AddressRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddressRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type AddressList struct {
	// strings addresslist = 1;
	Addresslist []string `protobuf:"bytes,1,rep,name=addresslist" json:"addresslist,omitempty"`
}

func (m *AddressList) Reset()                    { *m = AddressList{} }
func (m *AddressList) String() string            { return proto.CompactTextString(m) }
func (*AddressList) ProtoMessage()               {}
func (*AddressList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AddressList) GetAddresslist() []string {
	if m != nil {
		return m.Addresslist
	}
	return nil
}

type Cert struct {
	Cert    []byte `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	Keytype string `protobuf:"bytes,2,opt,name=keytype" json:"keytype,omitempty"`
}

func (m *Cert) Reset()                    { *m = Cert{} }
func (m *Cert) String() string            { return proto.CompactTextString(m) }
func (*Cert) ProtoMessage()               {}
func (*Cert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Cert) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *Cert) GetKeytype() string {
	if m != nil {
		return m.Keytype
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*IsPermissionReply)(nil), "ca_grpc.IsPermissionReply")
	proto.RegisterType((*AddressRequest)(nil), "ca_grpc.AddressRequest")
	proto.RegisterType((*AddressList)(nil), "ca_grpc.AddressList")
	proto.RegisterType((*Cert)(nil), "ca_grpc.Cert")
	proto.RegisterType((*Empty)(nil), "ca_grpc.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Greeter service

type GreeterClient interface {
	// 验证发行token的地址
	VerifyAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*IsPermissionReply, error)
	// 获取冻结地址的列表
	GetAddressList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AddressList, error)
	// 验证节点证书的签名
	VerifyCert(ctx context.Context, in *Cert, opts ...grpc.CallOption) (*IsPermissionReply, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) VerifyAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*IsPermissionReply, error) {
	out := new(IsPermissionReply)
	err := grpc.Invoke(ctx, "/ca_grpc.Greeter/VerifyAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) GetAddressList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AddressList, error) {
	out := new(AddressList)
	err := grpc.Invoke(ctx, "/ca_grpc.Greeter/GetAddressList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) VerifyCert(ctx context.Context, in *Cert, opts ...grpc.CallOption) (*IsPermissionReply, error) {
	out := new(IsPermissionReply)
	err := grpc.Invoke(ctx, "/ca_grpc.Greeter/VerifyCert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Greeter service

type GreeterServer interface {
	// 验证发行token的地址
	VerifyAddress(context.Context, *AddressRequest) (*IsPermissionReply, error)
	// 获取冻结地址的列表
	GetAddressList(context.Context, *Empty) (*AddressList, error)
	// 验证节点证书的签名
	VerifyCert(context.Context, *Cert) (*IsPermissionReply, error)
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_VerifyAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).VerifyAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ca_grpc.Greeter/VerifyAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).VerifyAddress(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_GetAddressList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GetAddressList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ca_grpc.Greeter/GetAddressList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GetAddressList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_VerifyCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).VerifyCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ca_grpc.Greeter/VerifyCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).VerifyCert(ctx, req.(*Cert))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ca_grpc.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyAddress",
			Handler:    _Greeter_VerifyAddress_Handler,
		},
		{
			MethodName: "GetAddressList",
			Handler:    _Greeter_GetAddressList_Handler,
		},
		{
			MethodName: "VerifyCert",
			Handler:    _Greeter_VerifyCert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ca.proto",
}

func init() { proto.RegisterFile("ca.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x51, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x6d, 0x6a, 0x35, 0xed, 0xb4, 0x09, 0x38, 0x08, 0x86, 0x9c, 0xc2, 0xe2, 0xa1, 0xa7, 0x08,
	0x2a, 0xa8, 0xc7, 0xd8, 0xd6, 0x22, 0x78, 0x90, 0x2d, 0x78, 0x2d, 0x31, 0x19, 0x25, 0xd8, 0x9a,
	0x38, 0xbb, 0x1e, 0xf6, 0xef, 0xf8, 0x63, 0xfc, 0x5d, 0xd2, 0x6d, 0x0c, 0xa9, 0x82, 0xb7, 0x79,
	0x2f, 0x8f, 0xf7, 0x91, 0x85, 0x7e, 0x96, 0xc6, 0x15, 0x97, 0xba, 0x44, 0x37, 0x4b, 0x97, 0x2f,
	0x5c, 0x65, 0xe2, 0x12, 0x0e, 0xef, 0xd4, 0x03, 0xf1, 0xba, 0x50, 0xaa, 0x28, 0xdf, 0x24, 0x55,
	0x2b, 0x83, 0x02, 0x46, 0x6d, 0x32, 0x70, 0x22, 0x67, 0xdc, 0x97, 0x3b, 0x9c, 0x38, 0x01, 0x3f,
	0xc9, 0x73, 0x26, 0xa5, 0x24, 0xbd, 0x7f, 0x90, 0xd2, 0x88, 0xd0, 0x4b, 0xf3, 0x9c, 0xad, 0x7a,
	0x20, 0xed, 0x2d, 0x4e, 0x61, 0x58, 0xab, 0xee, 0x0b, 0xa5, 0x31, 0x82, 0x61, 0xba, 0x85, 0xab,
	0x42, 0xe9, 0xc0, 0x89, 0xf6, 0xc6, 0x03, 0xd9, 0xa6, 0xc4, 0x05, 0xf4, 0x26, 0xc4, 0xd6, 0x2c,
	0x23, 0xd6, 0xd6, 0x6c, 0x24, 0xed, 0x8d, 0x01, 0xb8, 0xaf, 0x64, 0xb4, 0xa9, 0x28, 0xe8, 0xda,
	0x8c, 0x1f, 0x28, 0x5c, 0xd8, 0x9f, 0xad, 0x2b, 0x6d, 0xce, 0xbe, 0x1c, 0x70, 0xe7, 0x4c, 0xa4,
	0x89, 0xf1, 0x16, 0xbc, 0x47, 0xe2, 0xe2, 0xd9, 0xd4, 0x0d, 0xf0, 0x38, 0xae, 0x57, 0xc7, 0xbb,
	0xcd, 0xc3, 0xb0, 0xf9, 0xf0, 0xe7, 0x5f, 0x88, 0x0e, 0x5e, 0x81, 0x3f, 0x27, 0xdd, 0x9e, 0xe1,
	0x37, 0x7a, 0x9b, 0x1a, 0x1e, 0xfd, 0x36, 0xde, 0xa8, 0x44, 0x07, 0xaf, 0x01, 0xb6, 0x0d, 0xec,
	0x24, 0xaf, 0x51, 0x6d, 0xe0, 0xff, 0xa1, 0x37, 0xde, 0x67, 0x17, 0x26, 0xc9, 0x32, 0x99, 0x4e,
	0xe5, 0x6c, 0xb1, 0x78, 0x3a, 0xb0, 0xcf, 0x76, 0xfe, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x97,
	0x84, 0xb5, 0xc2, 0x01, 0x00, 0x00,
}
